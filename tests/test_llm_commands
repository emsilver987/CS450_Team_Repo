from __future__ import annotations

import json
from typer.testing import CliRunner

from ai_model_catalog import llm_client
from ai_model_catalog.cli import app


runner = CliRunner()


class _FakeLLM(llm_client.LLM):
    def __init__(self, text: str) -> None:
        self._text = text

    def generate(self, system_prompt: str, user_prompt: str, *, temperature: float = 0.0) -> str:
        # Keep it deterministic and short so snapshots are stable
        return self._text


def test_explain_context_only(monkeypatch):
    # Patch the module attribute so cli.py's llm_client.get_llm() picks it up
    monkeypatch.setattr(llm_client, "get_llm", lambda: _FakeLLM("OK: explanation"))
    ctx = {"name": "bert-base-uncased", "description": "Classic BERT"}
    res = runner.invoke(app, ["explain", "--context-json", json.dumps(ctx)])
    assert res.exit_code == 0
    assert "OK: explanation" in res.stdout


def test_risk_check_permissive(monkeypatch):
    monkeypatch.setattr(llm_client, "get_llm", lambda: _FakeLLM("OK: advisory"))
    res = runner.invoke(
        app,
        [
            "risk-check",
            "--license-id",
            "mit",
            "--has-readme",  # True
            "--has-license-section",  # True
            "--has-training-data-info",  # True
            "--has-eval-info",  # True
            "--maintainer-active",  # Optional[bool] -> True
            "--no-deserialization-uses-pickle",  # False
            "--has-model-card",  # True
        ],
    )
    assert res.exit_code == 0
    out = res.stdout.lower()
    assert "license status" in out and "compatible" in out
    assert "ok: advisory" in out


def test_risk_check_incompatible(monkeypatch):
    monkeypatch.setattr(llm_client, "get_llm", lambda: _FakeLLM("OK: advisory"))
    res = runner.invoke(
        app,
        [
            "risk-check",
            "--license-id",
            "gpl-3.0-only",
            "--has-readme",
            "--has-license-section",
        ],
    )
    assert res.exit_code == 0
    out = res.stdout
    assert "incompatible" in out.lower()
    assert "[HIGH]" in out  # incompatible should surface as HIGH severity
