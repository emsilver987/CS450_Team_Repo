#!/usr/bin/env bash
# Cross-platform AI Model Catalog CLI - Auto-Grader Interface

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Logging functions
log_info()    { echo -e "${GREEN}[INFO]${NC} $1"; }
log_warn()    { echo -e "${YELLOW}[WARNING]${NC} $1"; }
log_error()   { echo -e "${RED}[ERROR]${NC} $1"; }

# Check for Python 3.10+
check_python() {
    if ! command -v python3 &>/dev/null; then
        log_error "Python 3 is required but not installed."
        exit 1
    fi

    pyv=$(python3 -c "import sys; print(f'{sys.version_info.major}.{sys.version_info.minor}')")
    required="3.10"
    if [[ "$(printf '%s\n' "$required" "$pyv" | sort -V | head -n1)" != "$required" ]]; then
        log_error "Python 3.10+ is required, found $pyv"
        exit 1
    fi
}

# Install Python dependencies in dev mode
install_deps() {
    log_info "Installing Python dependencies..."
    if ! command -v pip3 &>/dev/null; then
        log_error "pip3 is not installed."
        exit 1
    fi

    if pip3 install -e . >/dev/null 2>&1; then
        log_info "Dependencies installed successfully."
        exit 0
    else
        log_error "Dependency installation failed."
        exit 1
    fi
}

# Run tests and enforce 80% coverage with summary line
run_tests() {
    log_info "Running tests and checking code coverage..."

    # Run tests and collect coverage
    coverage run -m pytest tests || true

    # Generate coverage report and extract percentage
    coverage_report=$(coverage report -m)
    echo "$coverage_report"

    percent=$(echo "$coverage_report" | grep -E '^TOTAL' | awk '{print $NF}' | tr -d '%')

    if [[ -z "$percent" ]]; then
        log_error "Could not determine coverage percentage."
        exit 1
    fi

    # Count passed and failed test cases
    test_summary=$(pytest tests --tb=short -q --disable-warnings | tee /dev/tty | tail -10 | grep -E 'passed|failed' || true)
    passed=$(echo "$test_summary" | grep -oP '(\d+) passed' | grep -oP '\d+' || echo 0)
    failed=$(echo "$test_summary" | grep -oP '(\d+) failed' | grep -oP '\d+' || echo 0)
    total=$((passed + failed))

    echo ""
    echo "Test summary:"
    echo "${passed}/${total} test cases passed. ${percent}% line coverage achieved."
    echo ""

    if (( failed > 0 )); then
        log_error "Some tests failed."
        exit 1
    fi

    if (( percent < 80 )); then
        log_error "Test coverage ${percent}% is below required 80%."
        exit 1
    fi

    log_info "All tests passed and coverage requirement met."
    exit 0
}


# Process URL list with improved error handling
process_urls() {
    local file="$1"
    if [[ ! -f "$file" ]]; then
        log_error "URL file not found: $file"
        exit 1
    fi

    log_info "Processing URLs from $file"

    while IFS= read -r url; do
        [[ -z "$url" || "$url" =~ ^# ]] && continue

        log_info "Processing: $url"

        if [[ "$url" =~ huggingface\.co/.*/models ]]; then
            id=$(echo "$url" | sed -E 's|.*huggingface\.co/([^/]+/[^/]+).*|\1|')
            python3 -m src.ai_model_catalog hf-model --model-id "$id" --format ndjson || {
                log_error "Failed to process model URL: $url"
                exit 1
            }

        elif [[ "$url" =~ huggingface\.co/datasets/ ]]; then
            id=$(echo "$url" | sed -E 's|.*huggingface\.co/datasets/([^/]+/[^/]+).*|\1|')
            python3 -m src.ai_model_catalog hf-dataset --dataset-id "$id" --format ndjson || {
                log_error "Failed to process dataset URL: $url"
                exit 1
            }

        elif [[ "$url" =~ github\.com ]]; then
            repo_path=$(echo "$url" | sed -E 's|.*github\.com/([^/]+/[^/]+).*|\1|')
            owner=$(echo "$repo_path" | cut -d/ -f1)
            repo=$(echo "$repo_path" | cut -d/ -f2)
            python3 -m src.ai_model_catalog models --owner "$owner" --repo "$repo" --format ndjson || {
                log_error "Failed to process GitHub URL: $url"
                exit 1
            }

        else
            log_warn "Unsupported URL format: $url"
        fi
    done < "$file"

    log_info "URL processing complete."
    exit 0
}

main() {
    check_python
    case "${1:-}" in
        install)
            install_deps
            ;;
        test)
            run_tests
            ;;
        "")
            log_error "No command provided. Use: ./run install | test | <url_file.txt>"
            exit 1
            ;;
        *)
            process_urls "$1"
            ;;
    esac
}

main "$@"