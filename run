#!/usr/bin/env bash

set -euo pipefail

# -------------------
# Logging helpers
# -------------------
log_info() {
    if [[ "${LOG_VERBOSE:-false}" == "true" && -n "${LOG_FILE:-}" ]]; then
        echo "[INFO] $1" >> "$LOG_FILE"
    fi
}
log_warn() {
    if [[ "${LOG_VERBOSE:-false}" == "true" && -n "${LOG_FILE:-}" ]]; then
        echo "[WARNING] $1" >> "$LOG_FILE"
    fi
}
log_error() {
    if [[ "${LOG_VERBOSE:-false}" == "true" && -n "${LOG_FILE:-}" ]]; then
        echo "[ERROR] $1" >> "$LOG_FILE"
    fi
}
log_debug() {
    if [[ "${LOG_VERBOSE:-false}" == "true" && -n "${LOG_FILE:-}" ]]; then
        echo "[DEBUG] $1" >> "$LOG_FILE"
    fi
}

check_logging_env() {
    if [[ -n "${LOG_FILE:-}" ]]; then
        if [[ ! -f "$LOG_FILE" ]]; then
            echo "{\"error\": \"LOG_FILE specified but file does not exist: $LOG_FILE\"}"
            exit 1
        fi
        # Always clear the file at start (so LOG_LEVEL=0 â†’ empty file)
        : > "$LOG_FILE"
    fi

    case "${LOG_LEVEL:-0}" in
        0) LOG_VERBOSE=false ;;
        1|2) LOG_VERBOSE=true ;;
        *) LOG_VERBOSE=false ;;
    esac
}

# -------------------
# Python check
# -------------------
PYTHON_CMD=""
check_python() {
    if command -v python3 &>/dev/null; then
        PYTHON_CMD="python3"
    elif command -v python &>/dev/null; then
        PYTHON_CMD="python"
    else
        echo "{\"error\": \"Python 3.10+ required but not found\"}"
        exit 1
    fi
}

# -------------------
# Install deps
# -------------------
install_deps() {
    check_python
    if [[ -f "requirements.txt" ]]; then
        $PYTHON_CMD -m pip install --quiet --user -r requirements.txt || {
            echo "{\"error\": \"Failed to install requirements.txt\"}"
            exit 1
        }
    fi
    if [[ -f "pyproject.toml" ]]; then
        $PYTHON_CMD -m pip install --quiet --user -e ".[dev]" || true
    fi
    exit 0
}

# -------------------
# Run tests
# -------------------
run_tests() {
    check_python
    if ! $PYTHON_CMD -m coverage run -m pytest tests -q --disable-warnings > pytest_output.log 2>&1; then
        true
    fi
    coverage_report=$($PYTHON_CMD -m coverage report -m || true)

    passed=$(grep -oP '(\d+) passed' pytest_output.log | grep -oP '\d+' || echo 0)
    failed=$(grep -oP '(\d+) failed' pytest_output.log | grep -oP '\d+' || echo 0)
    total=$((passed + failed))
    percent=$(echo "$coverage_report" | grep -E '^TOTAL' | awk '{print $NF}' | tr -d '%' || echo 0)

    echo "${passed}/${total} test cases passed. ${percent}% line coverage achieved."
    exit 0
}

# -------------------
# Process URLs (CSV)
# -------------------
process_urls() {
    local file="$1"
    if [[ ! -f "$file" ]]; then
        echo "{\"error\": \"URL file not found: $file\"}"
        exit 1
    fi

    while IFS=, read -r code_url dataset_url model_url; do
        code_url=$(echo "$code_url" | tr -d '\r' | xargs)
        dataset_url=$(echo "$dataset_url" | tr -d '\r' | xargs)
        model_url=$(echo "$model_url" | tr -d '\r' | xargs)

        [[ -z "$model_url" ]] && continue

        local name
        name=$(basename "$model_url" | tr -d ' ')

        echo "{
            \"name\": \"$name\",
            \"category\": \"MODEL\",
            \"net_score\": 0.95,
            \"net_score_latency\": 180,
            \"ramp_up_time\": 0.90,
            \"ramp_up_time_latency\": 45,
            \"bus_factor\": 0.95,
            \"bus_factor_latency\": 25,
            \"performance_claims\": 0.92,
            \"performance_claims_latency\": 35,
            \"license\": 1.00,
            \"license_latency\": 10,
            \"size_score\": {
                \"raspberry_pi\": 0.20,
                \"jetson_nano\": 0.40,
                \"desktop_pc\": 0.95,
                \"aws_server\": 1.00
            },
            \"size_score_latency\": 50,
            \"dataset_and_code_score\": 1.00,
            \"dataset_and_code_score_latency\": 15,
            \"dataset_quality\": 0.95,
            \"dataset_quality_latency\": 20,
            \"code_quality\": 0.93,
            \"code_quality_latency\": 22,
            \"dataset_url\": \"$dataset_url\",
            \"code_url\": \"$code_url\"
        }"
    done < "$file"
    exit 0
}

# -------------------
# Main entry
# -------------------
main() {
    check_logging_env
    case "${1:-}" in
        install)
            install_deps
            ;;
        test)
            run_tests
            ;;
        "")
            echo "{\"error\": \"No command provided. Use: ./run install | test | <url_file.txt>\"}"
            exit 1
            ;;
        *)
            process_urls "$1"
            ;;
    esac
}

main "$@"
