#!/bin/bash
# AI Model Catalog CLI - Auto-Grader Interface
# This script provides the required interface for automated evaluation

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to check if Python is available
check_python() {
    if ! command -v python3 &> /dev/null; then
        print_error "Python 3 is required but not installed"
        exit 1
    fi
    
    # Check Python version (3.10+)
    python_version=$(python3 -c 'import sys; print(".".join(map(str, sys.version_info[:2])))')
    required_version="3.10"
    
    if [ "$(printf '%s\n' "$required_version" "$python_version" | sort -V | head -n1)" != "$required_version" ]; then
        print_error "Python 3.10+ is required, found $python_version"
        exit 1
    fi
}

# Function to install dependencies
install_deps() {
    print_status "Installing dependencies..."
    
    # Check if pip is available
    if ! command -v pip3 &> /dev/null; then
        print_error "pip3 is required but not installed"
        exit 1
    fi
    
    # Install the package in development mode
    pip3 install --user -e . > /dev/null 2>&1
    
    if [ $? -eq 0 ]; then
        print_status "Dependencies installed successfully"
        exit 0
    else
        print_error "Failed to install dependencies"
        exit 1
    fi
}

# Function to run tests
run_tests() {
    print_status "Running test suite..."
    
    # Check if pytest is available
    if ! command -v pytest &> /dev/null; then
        print_error "pytest is required but not installed"
        exit 1
    fi
    
    # Run tests with coverage
    coverage_output=$(pytest --cov=src --cov-report=term-missing --tb=short -q 2>&1)
    
    if [ $? -eq 0 ]; then
        # Extract test results and coverage
        test_count=$(echo "$coverage_output" | grep -o '[0-9]* passed' | grep -o '[0-9]*' | head -1)
        coverage_percent=$(echo "$coverage_output" | grep -o '[0-9]*%' | head -1 | sed 's/%//')
        
        if [ -z "$test_count" ]; then
            test_count=0
        fi
        
        if [ -z "$coverage_percent" ]; then
            coverage_percent=0
        fi
        
        echo "$test_count/$test_count test cases passed. $coverage_percent% line coverage achieved."
        exit 0
    else
        print_error "Tests failed"
        exit 1
    fi
}

# Function to process URL file
process_urls() {
    local url_file="$1"
    
    if [ -z "$url_file" ]; then
        print_error "URL file path is required"
        exit 1
    fi
    
    if [ ! -f "$url_file" ]; then
        print_error "URL file not found: $url_file"
        exit 1
    fi
    
    print_status "Processing URLs from: $url_file"
    
    # Read URLs from file and process each one
    while IFS= read -r url; do
        # Skip empty lines
        if [ -z "$url" ]; then
            continue
        fi
        
        # Skip comment lines
        if [[ "$url" =~ ^# ]]; then
            continue
        fi
        
        print_status "Processing: $url"
        
        # Determine URL type and process accordingly
        if [[ "$url" =~ huggingface\.co.*models ]]; then
            # Extract model ID from Hugging Face URL
            model_id=$(echo "$url" | sed 's|.*huggingface\.co/||' | sed 's|/tree/.*||')
            python3 -m src.ai_model_catalog hf-model --model-id "$model_id" --format ndjson
        elif [[ "$url" =~ huggingface\.co.*datasets ]]; then
            # Extract dataset ID from Hugging Face URL
            dataset_id=$(echo "$url" | sed 's|.*huggingface\.co/datasets/||' | sed 's|/tree/.*||')
            python3 -m src.ai_model_catalog hf-dataset --dataset-id "$dataset_id" --format ndjson
        elif [[ "$url" =~ github\.com ]]; then
            # Extract owner and repo from GitHub URL
            owner_repo=$(echo "$url" | sed 's|.*github\.com/||' | sed 's|/tree/.*||' | sed 's|/blob/.*||')
            owner=$(echo "$owner_repo" | cut -d'/' -f1)
            repo=$(echo "$owner_repo" | cut -d'/' -f2)
            python3 -m src.ai_model_catalog models --owner "$owner" --repo "$repo" --format ndjson
        else
            print_warning "Unsupported URL format: $url"
            continue
        fi
        
    done < "$url_file"
    
    print_status "URL processing completed"
    exit 0
}

# Main script logic
main() {
    # Check Python availability
    check_python
    
    case "$1" in
        "install")
            install_deps
            ;;
        "test")
            run_tests
            ;;
        "")
            print_error "No command specified. Use: ./run install|test|URL_FILE"
            exit 1
            ;;
        *)
            # Assume it's a URL file
            process_urls "$1"
            ;;
    esac
}

# Run main function with all arguments
main "$@"
