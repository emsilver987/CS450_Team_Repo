#!/usr/bin/env bash
# Cross-platform AI Model Catalog CLI - Auto-Grader Interface
# On Windows, run this script using: bash ./run <args>

set -euo pipefail

# Output colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

# Logging
log_info()  { echo -e "${GREEN}[INFO]${NC} $1"; }
log_warn()  { echo -e "${YELLOW}[WARNING]${NC} $1"; }
log_error() { echo -e "${RED}[ERROR]${NC} $1"; }

# Python version check
check_python() {
    if ! command -v python3 &>/dev/null; then
        log_error "Python 3 is required but not installed."
        exit 1
    fi

    pyv=$(python3 -c "import sys; print(f'{sys.version_info.major}.{sys.version_info.minor}')")
    required="3.10"
    if [[ "$(printf '%s\n' "$required" "$pyv" | sort -V | head -n1)" != "$required" ]]; then
        log_error "Python 3.10+ is required, found $pyv"
        exit 1
    fi
}

# Check if required Python packages are installed
check_python_packages() {
    if ! python3 -c "import coverage, typer" &>/dev/null; then
        log_error "Missing required Python packages. Run: pip install -e ."
        exit 1
    fi
}

# Install dependencies
install_deps() {
    log_info "Installing Python dependencies..."
    if ! command -v pip3 &>/dev/null; then
        log_error "pip3 is not installed."
        exit 1
    fi

    if pip3 install -e . >/dev/null 2>&1; then
        log_info "Dependencies installed successfully."
        exit 0
    else
        log_error "Dependency installation failed."
        exit 1
    fi
}

# Run tests and enforce 80% coverage
run_tests() {
    check_python_packages
    log_info "Running tests and checking code coverage..."

    if ! coverage run -m pytest tests; then
        log_error "Some tests failed."
        exit 1
    fi

    coverage_report=$(coverage report -m)
    echo "$coverage_report"

    percent=$(echo "$coverage_report" | grep -E '^TOTAL' | awk '{print $NF}' | tr -d '%')

    if [[ -z "$percent" ]]; then
        log_error "Could not determine test coverage percentage."
        exit 1
    fi

    if (( percent < 80 )); then
        log_error "Test coverage ${percent}% is below required 80%."
        exit 1
    fi

    log_info "All tests passed. ${percent}% coverage achieved."
    exit 0
}

# Process URLs in a file (models, datasets, repos)
process_urls() {
    local file="$1"
    local status=0

    if [[ ! -f "$file" ]]; then
        log_error "URL file not found: $file"
        exit 1
    fi

    log_info "Processing URLs from $file..."

    while IFS= read -r url; do
        [[ -z "$url" || "$url" =~ ^# ]] && continue
        log_info "Processing: $url"

        if [[ "$url" =~ huggingface\.co/.*/models ]]; then
            id=$(echo "$url" | sed -E 's|.*huggingface\.co/([^/]+/[^/]+).*|\1|')
            if ! python3 -m src.ai_model_catalog hf-model --model-id "$id" --format ndjson; then
                log_error "Failed to process model URL: $url"
                status=1
            fi

        elif [[ "$url" =~ huggingface\.co/datasets/ ]]; then
            id=$(echo "$url" | sed -E 's|.*huggingface\.co/datasets/([^/]+/[^/]+).*|\1|')
            if ! python3 -m src.ai_model_catalog hf-dataset --dataset-id "$id" --format ndjson; then
                log_error "Failed to process dataset URL: $url"
                status=1
            fi

        elif [[ "$url" =~ github\.com ]]; then
            repo_path=$(echo "$url" | sed -E 's|.*github\.com/([^/]+/[^/]+).*|\1|')
            owner=$(echo "$repo_path" | cut -d/ -f1)
            repo=$(echo "$repo_path" | cut -d/ -f2)
            if ! python3 -m src.ai_model_catalog models --owner "$owner" --repo "$repo" --format ndjson; then
                log_error "Failed to process GitHub URL: $url"
                status=1
            fi

        else
            log_warn "Unsupported URL format: $url"
        fi
    done < "$file"

    if [[ "$status" -eq 0 ]]; then
        log_info "All URLs processed successfully."
    else
        log_error "Some URLs failed to process."
    fi

    exit "$status"
}

# Entry point
main() {
    check_python

    case "${1:-}" in
        install)
            install_deps
            ;;
        test)
            run_tests
            ;;
        "")
            log_error "No command provided. Use: ./run install | test | <url_file.txt>"
            exit 1
            ;;
        *)
            process_urls "$1"
            ;;
    esac
}

main "$@"
