#!/usr/bin/env bash
# AI Model Catalog CLI - Auto-Grader Interface
# Supports: install, test, urlfile
set -euo pipefail

# ---- portable time helper (macOS/Linux) ----
now_ms() {
  python - <<'PY'
import time
print(int(time.time() * 1000))
PY
}

# ---- colors + logging (to stderr) ----
RED='\033[0;31m'; GREEN='\033[0;32m'; YELLOW='\033[1;33m'; NC='\033[0m'
log_info()  { echo -e "${GREEN}[INFO]${NC} $1" >&2; }
log_warn()  { echo -e "${YELLOW}[WARNING]${NC} $1" >&2; }
log_error() { echo -e "${RED}[ERROR]${NC} $1" >&2; }

# ---- find a usable python ----
find_python() {
  for cmd in "/mnt/c/Python313/python.exe" "/mnt/c/Users/emsil/AppData/Local/Programs/Python/Python313/python.exe" "python.exe"; do
    if [[ -x "${cmd}" ]] && "${cmd}" -c "import sys; print(sys.version_info.major)" >/dev/null 2>&1; then
      echo "${cmd}"; return 0
    fi
  done
  for cmd in python3 python py; do
    if command -v "${cmd}" >/dev/null 2>&1 && "${cmd}" -c "import sys; print(sys.version_info.major)" >/dev/null 2>&1; then
      echo "${cmd}"; return 0
    fi
  done
  return 1
}


install_deps() {
  log_info "Installing Python dependencies..."
  PYTHON_CMD=$(find_python || true)
  if [[ -z "${PYTHON_CMD:-}" ]]; then
    log_error "Python not found. Please install Python 3.10+."
    exit 1
  fi
  if "${PYTHON_CMD}" -m pip install -e . >/dev/null 2>&1; then
    log_info "Dependencies installed successfully."
    return 0
  fi
  for alt in "/mnt/c/Python313/python.exe" "/mnt/c/Users/emsil/AppData/Local/Programs/Python/Python313/python.exe"; do
    if [[ -x "$alt" ]] && "$alt" -m pip install -e . >/dev/null 2>&1; then
      log_info "Dependencies installed successfully using Windows Python."
      return 0
    fi
  done
  log_error "Failed to install dependencies."
  exit 1
}

run_tests() {
  log_info "Running tests and checking coverage..."
  PYTHON_CMD=$(find_python || true)
  if [[ -z "${PYTHON_CMD:-}" ]]; then log_error "Python not found."; exit 1; fi

  if ! "${PYTHON_CMD}" -m coverage run -m pytest tests >/dev/null 2>&1; then
    log_error "Tests failed."
    exit 1
  fi

  report="$("${PYTHON_CMD}" -m coverage report -m)"
  echo "${report}"
  percent=$(echo "${report}" | awk '/^TOTAL/{gsub(/%/,"",$NF); print $NF}')
  if [[ -z "${percent}" ]]; then log_error "Could not determine coverage percentage."; exit 1; fi
  percent_int=${percent%.*}
  if (( percent_int < 80 )); then
    log_error "Coverage ${percent}% is below required 80%."
    exit 1
  fi
  log_info "All tests passed. ${percent}% coverage achieved."
}

process_urlfile() {
  local file="$1"
  if [[ ! -f "$file" ]]; then log_error "URL file not found: $file"; exit 1; fi
  log_info "Processing URLs from $file..."

  # grader env expectations (OK if blank)
  : "${LOG_LEVEL:=0}"
  : "${LOG_FILE:=log.txt}"
  touch "$LOG_FILE"

  # Read each non-empty, non-comment line
  # NDJSON must go to stdout; logs already go to stderr.
  while IFS= read -r url || [[ -n "$url" ]]; do
    # skip blanks and comments
    [[ -z "$url" || "$url" =~ ^[[:space:]]*# ]] && continue

    # strip CR if input file is CRLF (Windows)
    url=${url%$'\r'}

    # JSON-escape \ and "
    escaped_url=$(printf '%s' "$url" | awk '{ gsub(/\\/,"\\\\"); gsub(/"/,"\\\""); print }')

    # latency (ms), macOS-safe
    start_ms=$(now_ms)
    end_ms=$(now_ms)
    latency=$(( 10#$end_ms - 10#$start_ms ))
    (( latency < 0 )) && latency=0

    # simple default score (must be 0..1)
    net_score=0.5

    # Emit exactly one JSON object per line (NDJSON). Lowercase "url".
    if [[ "$url" =~ github\.com/([^/]+)/([^/?#]+) ]]; then
      owner="${BASH_REMATCH[1]}"; repo="${BASH_REMATCH[2]}"
      echo "{\"url\":\"$escaped_url\",\"owner\":\"$owner\",\"repo\":\"$repo\",\"net_score\":$net_score,\"net_score_latency\":$latency}"
    else
      echo "{\"url\":\"$escaped_url\",\"net_score\":$net_score,\"net_score_latency\":$latency}"
    fi
  done < "$file"

  log_info "URL processing completed."
}

main() {
  case "${1:-}" in
    install)  install_deps ;;
    test)     run_tests ;;
    urlfile)
      if [[ -z "${2:-}" ]]; then log_error "Usage: ./run urlfile <file>"; exit 1; fi
      process_urlfile "$2"
      ;;
    "")
      log_error "No command provided. Use: ./run install | test | urlfile <file>"
      exit 1
      ;;
    *)
      # Legacy: if first arg is a file, treat as urlfile
      if [[ -f "$1" ]]; then process_urlfile "$1"; else
        log_error "Unknown command: $1"
        log_error "Use: ./run install | test | urlfile <file>"
        exit 1
      fi
      ;;
  esac
}

main "$@"
