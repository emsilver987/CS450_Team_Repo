#!/usr/bin/env bash
# Cross-platform AI Model Catalog CLI - Auto-Grader Interface
# Optimized for auto-grader environment

set -euo pipefail

# Output colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

# Logging
log_info()  { echo -e "${GREEN}[INFO]${NC} $1"; }
log_warn()  { echo -e "${YELLOW}[WARNING]${NC} $1"; }
log_error() { echo -e "${RED}[ERROR]${NC} $1"; }

# Python detection - try multiple paths
find_python() {
    # Try virtual environment first
    if [[ -f ".venv/bin/python" ]]; then
        echo ".venv/bin/python"
        return 0
    fi
    
    # Try system python
    for py in python3 python; do
        if command -v "$py" &>/dev/null; then
            echo "$py"
            return 0
        fi
    done
    return 1
}

# Check Python and packages
check_python() {
    PYTHON_CMD=$(find_python)
    if [[ -z "$PYTHON_CMD" ]]; then
        log_error "Python is required but not installed."
        exit 1
    fi
    
    # Check if we can import required modules
    if ! $PYTHON_CMD -c "import sys; print('Python OK')" &>/dev/null; then
        log_error "Python is not working properly."
        exit 1
    fi
}

# Install dependencies
install_deps() {
    log_info "Installing Python dependencies..."
    
    # Use virtual environment if available
    if [[ -f ".venv/bin/pip" ]]; then
        PIP_CMD=".venv/bin/pip"
    else
        # Try different pip commands
        PIP_CMD=""
        for pip in pip3 pip; do
            if command -v "$pip" &>/dev/null; then
                PIP_CMD="$pip"
                break
            fi
        done
        
        if [[ -z "$PIP_CMD" ]]; then
            log_error "pip is not installed."
            exit 1
        fi
    fi
    
    # Install dependencies
    if $PIP_CMD install -e . >/dev/null 2>&1; then
        log_info "Dependencies installed successfully."
        exit 0
    else
        log_error "Dependency installation failed."
        exit 1
    fi
}

# Run tests
run_tests() {
    log_info "Running tests and checking code coverage..."
    
    PYTHON_CMD=$(find_python)
    
    # Try different test runners
    if [[ -f ".venv/bin/pytest" ]]; then
        TEST_CMD=".venv/bin/pytest"
    elif command -v pytest &>/dev/null; then
        TEST_CMD="pytest"
    elif $PYTHON_CMD -m pytest --version &>/dev/null; then
        TEST_CMD="$PYTHON_CMD -m pytest"
    else
        log_error "pytest is not available."
        exit 1
    fi
    
    # Run tests
    if $TEST_CMD tests >/dev/null 2>&1; then
        log_info "All tests passed."
        exit 0
    else
        log_error "Some tests failed."
        exit 1
    fi
}

# Process URLs
process_urls() {
    local file="$1"
    local status=0

    if [[ ! -f "$file" ]]; then
        log_error "URL file not found: $file"
        exit 1
    fi

    log_info "Processing URLs from $file..."
    
    PYTHON_CMD=$(find_python)

    while IFS= read -r url; do
        [[ -z "$url" || "$url" =~ ^# ]] && continue
        log_info "Processing: $url"

        if [[ "$url" =~ huggingface\.co/datasets/ ]]; then
            # Extract dataset ID
            if [[ "$url" =~ huggingface\.co/datasets/([^/]+/[^/]+) ]]; then
                id="${BASH_REMATCH[1]}"
            elif [[ "$url" =~ huggingface\.co/datasets/([^/]+) ]]; then
                id="${BASH_REMATCH[1]}"
            fi
            id=$(echo "$id" | sed 's|/$||' | tr -d '\r')
            
            if ! $PYTHON_CMD -m src.ai_model_catalog hf-dataset --dataset-id "$id" --format ndjson; then
                log_error "Failed to process dataset URL: $url"
                status=1
            fi

        elif [[ "$url" =~ huggingface\.co/[^/]+/[^/]+ ]] && [[ ! "$url" =~ huggingface\.co/datasets/ ]]; then
            # Extract model ID
            id=$(echo "$url" | sed -E 's|.*huggingface\.co/([^/]+/[^/]+).*|\1|' | tr -d '\r')
            
            if ! $PYTHON_CMD -m src.ai_model_catalog hf-model --model-id "$id" --format ndjson; then
                log_error "Failed to process model URL: $url"
                status=1
            fi

        elif [[ "$url" =~ github\.com ]]; then
            # Extract repo info
            repo_path=$(echo "$url" | sed -E 's|.*github\.com/([^/]+/[^/]+).*|\1|' | tr -d '\r')
            owner=$(echo "$repo_path" | cut -d/ -f1)
            repo=$(echo "$repo_path" | cut -d/ -f2)
            
            if ! $PYTHON_CMD -m src.ai_model_catalog models --owner "$owner" --repo "$repo" --format ndjson; then
                log_error "Failed to process GitHub URL: $url"
                status=1
            fi

        else
            log_warn "Unsupported URL format: $url"
        fi
    done < "$file"

    if [[ $status -eq 0 ]]; then
        log_info "All URLs processed successfully."
    else
        log_error "Some URLs failed to process."
    fi

    exit $status
}

main() {
    check_python

    case "${1:-}" in
        install)
            install_deps
            ;;
        test)
            run_tests
            ;;
        "")
            log_error "No command provided. Use: ./run install | test | <url_file.txt>"
            exit 1
            ;;
        *)
            process_urls "$1"
            ;;
    esac
}

main "$@"